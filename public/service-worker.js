/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./service-worker.js":
/*!***************************!*\
  !*** ./service-worker.js ***!
  \***************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("importScripts(\"https://storage.googleapis.com/workbox-cdn/releases/6.1.5/workbox-sw.js\");\nconst CACHE_NAME = \"my-cache-v1\";\nconst API_CACHE_NAME = \"api-cache-v1\";\nconst urlsToCache = [\n    \"/\",\n    \"/shop\",\n    \"/cart\"\n];\n// Install Service Worker and cache static assets\nself.addEventListener(\"install\", (event)=>{\n    event.waitUntil(caches.open(CACHE_NAME).then((cache)=>{\n        console.log(\"Opened cache\");\n        return cache.addAll(urlsToCache).catch((error)=>{\n            console.error(\"Failed to cache URLs:\", error);\n        });\n    }));\n});\n// Cache and return requests\nself.addEventListener(\"fetch\", (event)=>{\n    if (event.request.url.includes(\"/api/\")) {\n        event.respondWith(caches.open(API_CACHE_NAME).then((cache)=>{\n            return fetch(event.request).then((response)=>{\n                if (!response || response.status !== 200 || response.type !== \"basic\") {\n                    return response;\n                }\n                const responseToCache = response.clone();\n                cache.put(event.request, responseToCache);\n                return response;\n            }).catch(()=>{\n                return caches.match(event.request).then((response)=>{\n                    return response || new Response(\"No internet connection and no cached data available\");\n                });\n            });\n        }));\n    } else {\n        event.respondWith(caches.match(event.request).then((cachedResponse)=>{\n            if (cachedResponse) {\n                return cachedResponse;\n            }\n            return fetch(event.request).then((response)=>{\n                if (!response || response.status !== 200 || response.type !== \"basic\") {\n                    return response;\n                }\n                const responseToCache = response.clone();\n                caches.open(CACHE_NAME).then((cache)=>{\n                    cache.put(event.request, responseToCache);\n                });\n                return response;\n            });\n        }).catch((error)=>{\n            console.error(\"Fetch failed:\", error);\n            return new Response(\"No internet connection and no cached data available\");\n        }));\n    }\n});\n// Activate Service Worker and remove old caches\nself.addEventListener(\"activate\", (event)=>{\n    const cacheWhitelist = [\n        CACHE_NAME,\n        API_CACHE_NAME\n    ];\n    event.waitUntil(caches.keys().then((cacheNames)=>Promise.all(cacheNames.map((cacheName)=>{\n            if (!cacheWhitelist.includes(cacheName)) {\n                return caches.delete(cacheName);\n            }\n        }))));\n});\n// Check if Workbox is loaded\nif (typeof workbox !== \"undefined\") {\n    console.log(\"Workbox is loaded\");\n// Your Workbox code here\n} else {\n    console.log(\"Workbox is not loaded\");\n}\nif (workbox) {\n    workbox.core.clientsClaim();\n    const manifest = [];\n    if (manifest && Array.isArray(manifest)) {\n        workbox.precaching.precacheAndRoute(manifest);\n    } else {\n        console.warn(\"No precache manifest found. precacheAndRoute() may not be effective if the service worker has already finished installing and activating.\");\n    }\n    workbox.routing.registerRoute((param)=>{\n        let { request } = param;\n        return request.destination === \"document\";\n    }, new workbox.strategies.NetworkFirst());\n    workbox.routing.registerRoute((param)=>{\n        let { url } = param;\n        return url.origin === \"https://fonts.googleapis.com\" || url.origin === \"https://fonts.gstatic.com\";\n    }, new workbox.strategies.CacheFirst({\n        cacheName: \"google-fonts\",\n        plugins: [\n            new workbox.expiration.ExpirationPlugin({\n                maxEntries: 20,\n                maxAgeSeconds: 365 * 24 * 60 * 60\n            })\n        ]\n    }));\n    workbox.routing.registerRoute((param)=>{\n        let { request } = param;\n        return request.destination === \"script\" || request.destination === \"style\";\n    }, new workbox.strategies.StaleWhileRevalidate({\n        cacheName: \"static-resources\"\n    }));\n    workbox.routing.registerRoute((param)=>{\n        let { url } = param;\n        return url.origin === \"https://1pi0qth2.api.sanity.io\";\n    }, new workbox.strategies.NetworkFirst({\n        cacheName: \"sanity-api-cache\",\n        plugins: [\n            new workbox.expiration.ExpirationPlugin({\n                maxEntries: 50,\n                maxAgeSeconds: 5 * 60\n            })\n        ]\n    }));\n} else {\n    console.log(\"Workbox didn't load\");\n}\n// Push Notifications\nself.addEventListener(\"push\", function(event) {\n    const data = event.data.json();\n    const options = {\n        body: data.body,\n        icon: data.icon,\n        badge: data.badge,\n        data: {\n            url: data.url\n        }\n    };\n    event.waitUntil(self.registration.showNotification(data.title, options));\n});\nself.addEventListener(\"notificationclick\", function(event) {\n    event.notification.close();\n    event.waitUntil(clients.openWindow(event.notification.data.url));\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                /* unsupported import.meta.webpackHot */ undefined.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./service-worker.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	!function() {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = function() {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: function(script) { return script; }
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	!function() {
/******/ 		__webpack_require__.ts = function(script) { return __webpack_require__.tt().createScript(script); };
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	!function() {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push(function(options) {
/******/ 			var originalFactory = options.factory;
/******/ 			options.factory = function(moduleObject, moduleExports, webpackRequire) {
/******/ 				var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				var cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : function() {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./service-worker.js");
/******/ 	
/******/ })()
;